package com.example.tclengineeringmenu

import android.content.Intent
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import java.io.DataOutputStream

class MainActivity : AppCompatActivity() {

    private val tag = "EngineeringMenuLauncher"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // –ù–∞–π–¥—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        val logo = findViewById<ImageView>(R.id.tcl_logo)
        val btnRootMode = findViewById<Button>(R.id.btn_root_mode)
        val btnNoRootMode = findViewById<Button>(R.id.btn_no_root_mode)
        val tvPinHint = findViewById<TextView>(R.id.tv_pin_hint)

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
        logo.alpha = 0f
        logo.animate().alpha(1f).setDuration(500).start()

        // üîò Root Mode
        btnRootMode.setOnClickListener {
            if (isRootAvailable()) {
                launchWithRoot()
            } else {
                Toast.makeText(this, "Root –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", Toast.LENGTH_SHORT).show()
            }
        }

        // üîò No Root Mode
        btnNoRootMode.setOnClickListener {
            tvPinHint.visibility = View.VISIBLE
            launchWithoutRoot()
        }
    }

    // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ root
    private fun isRootAvailable(): Boolean {
        return try {
            ProcessBuilder().command("su", "-c", "echo 'root ok'").start().waitFor() == 0
        } catch (e: Exception) {
            false
        }
    }

    // üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ root
    private fun launchWithRoot() {
        try {
            val process = ProcessBuilder().command("su").start()
            val outputStream = DataOutputStream(process.outputStream)

            Log.d(tag, "–ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ root...")
            outputStream.writeBytes("am start -a com.tcl.factory.intent.action.FACTORYMENU -n com.tcl.factory.view/.MainMenu\n")
            outputStream.flush()

            Handler(Looper.getMainLooper()).postDelayed({
                try {
                    sendKeyEvents(outputStream, listOf(
                        "KEYCODE_1",
                        "KEYCODE_9",
                        "KEYCODE_5",
                        "KEYCODE_0"
                    ))

                    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    outputStream.writeBytes("input keyevent KEYCODE_ENTER\n")
                    outputStream.writeBytes("input keyevent KEYCODE_BACK\n")
                    outputStream.writeBytes("input keyevent KEYCODE_DPAD_RIGHT\n")
                    outputStream.writeBytes("input keyevent KEYCODE_DPAD_CENTER\n")
                    outputStream.writeBytes("exit\n")
                    outputStream.flush()

                } catch (e: Exception) {
                    Log.e("AutoInput", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–≤–≤–æ–¥–µ", e)
                }

                finishAndRemoveTask()

            }, 1200)

        } catch (e: Exception) {
            Log.e("LaunchError", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞ root-–¥–æ—Å—Ç—É–ø–∞", Toast.LENGTH_LONG).show()
        }
    }

    // üì± –ó–∞–ø—É—Å–∫ –±–µ–∑ root
    private fun launchWithoutRoot() {
        try {
            val intent = Intent().apply {
                action = "com.tcl.factory.intent.action.FACTORYMENU"
                setClassName("com.tcl.factory.view", "com.tcl.factory.view.MainMenu")
                flags = Intent.FLAG_ACTIVITY_NEW_TASK
            }

            startActivity(intent)
        } catch (e: Exception) {
            Toast.makeText(this, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–µ –º–µ–Ω—é", Toast.LENGTH_SHORT).show()
        }
    }

    // üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤–≤–æ–¥–∞
    private fun sendKeyEvents(stream: DataOutputStream, keys: List<String>, delayMs: Long = 20) {
        for (key in keys) {
            stream.writeBytes("input keyevent $key\n")
            stream.flush()
            Thread.sleep(delayMs)
        }
    }
}
